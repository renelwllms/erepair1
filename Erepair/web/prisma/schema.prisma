// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  TECHNICIAN
  CUSTOMER
}

enum JobStatus {
  OPEN
  IN_PROGRESS
  AWAITING_PARTS
  READY_FOR_PICKUP
  CLOSED
  CANCELLED
}

enum JobPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  PARTIALLY_PAID
  OVERDUE
  VOID
}

enum LineItemType {
  PART
  LABOR
  SERVICE
  DISCOUNT
  FEE
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  passwordHash  String?   @db.Text
  emailVerified DateTime?
  image         String?
  role          Role      @default(TECHNICIAN)
  phone         String?
  status        String?   @default("active")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  jobsAssigned  Job[]              @relation("JobAssignedTo")
  jobsCreated   Job[]              @relation("JobCreatedBy")
  statusHistory JobStatusHistory[]
  jobNotes      JobNote[]
  notifications Notification[]
  Customer      Customer[]
  JobPart       JobPart[]
  Appointment   Appointment[]
  JobDocument   JobDocument[]

  @@index([role])
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())

  @@unique([identifier, token])
}

model Customer {
  id            String   @id @default(cuid())
  firstName     String
  lastName      String
  email         String   @unique
  phone         String?
  customerType  String   @default("RESIDENTIAL")
  addressLine1  String?
  addressLine2  String?
  city          String?
  state         String?
  postalCode    String?
  notes         String?  @db.Text
  customerSince DateTime @default(now())
  totalRevenue  Decimal  @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdById   String?

  jobs   Job[]
  tokens PortalToken[]

  createdBy User? @relation(fields: [createdById], references: [id])

  @@index([lastName])
  @@index([email])
}

model Job {
  id                     String      @id @default(cuid())
  jobNumber              String      @unique
  customerId             String
  createdById            String?
  assignedTechId         String?
  applianceBrand         String?
  applianceType          String
  modelNumber            String?
  serialNumber           String?
  issueDescription       String      @db.Text
  priority               JobPriority @default(MEDIUM)
  status                 JobStatus   @default(OPEN)
  warrantyStatus         String?     @default("OUT_OF_WARRANTY")
  serviceLocation        String?
  estimatedCompletion    DateTime?
  preferredContactMethod String?     @default("email")
  photos                 Json?
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt

  customer      Customer           @relation(fields: [customerId], references: [id], onDelete: Cascade)
  createdBy     User?              @relation("JobCreatedBy", fields: [createdById], references: [id])
  assignedTech  User?              @relation("JobAssignedTo", fields: [assignedTechId], references: [id])
  statusHistory JobStatusHistory[]
  notes         JobNote[]
  parts         JobPart[]
  appointments  Appointment[]
  invoices      Invoice[]
  documents     JobDocument[]
  PortalToken   PortalToken[]

  @@index([customerId])
  @@index([assignedTechId])
  @@index([status])
  @@index([priority])
}

model JobStatusHistory {
  id        String    @id @default(cuid())
  jobId     String
  status    JobStatus
  note      String?   @db.Text
  createdBy String?
  createdAt DateTime  @default(now())

  job  Job   @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user User? @relation(fields: [createdBy], references: [id])

  @@index([jobId])
  @@index([status])
}

model JobNote {
  id         String   @id @default(cuid())
  jobId      String
  createdBy  String?
  visibility String   @default("internal")
  body       String   @db.Text
  createdAt  DateTime @default(now())

  job  Job   @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user User? @relation(fields: [createdBy], references: [id])

  @@index([jobId])
}

model Part {
  id          String   @id @default(cuid())
  sku         String   @unique
  name        String
  brand       String?
  description String?  @db.Text
  cost        Decimal  @default(0)
  price       Decimal  @default(0)
  stock       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  jobParts JobPart[]
}

model JobPart {
  id        String   @id @default(cuid())
  jobId     String
  partId    String
  quantity  Int      @default(1)
  unitPrice Decimal  @default(0)
  addedById String?
  addedAt   DateTime @default(now())

  job  Job   @relation(fields: [jobId], references: [id], onDelete: Cascade)
  part Part  @relation(fields: [partId], references: [id])
  user User? @relation(fields: [addedById], references: [id])

  @@index([jobId])
  @@index([partId])
}

model Appointment {
  id           String   @id @default(cuid())
  jobId        String
  technicianId String
  start        DateTime
  end          DateTime
  notes        String?  @db.Text
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  job        Job  @relation(fields: [jobId], references: [id], onDelete: Cascade)
  technician User @relation(fields: [technicianId], references: [id])

  @@index([jobId])
  @@index([technicianId])
}

model Invoice {
  id            String        @id @default(cuid())
  jobId         String        @unique
  invoiceNumber String        @unique
  status        InvoiceStatus @default(DRAFT)
  issueDate     DateTime      @default(now())
  dueDate       DateTime?
  subtotal      Decimal       @default(0)
  tax           Decimal       @default(0)
  total         Decimal       @default(0)
  notes         String?       @db.Text
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  job      Job           @relation(fields: [jobId], references: [id], onDelete: Cascade)
  items    InvoiceLine[]
  payments Payment[]

  @@index([status])
}

model InvoiceLine {
  id          String       @id @default(cuid())
  invoiceId   String
  type        LineItemType @default(PART)
  description String
  quantity    Decimal      @default(1)
  unitPrice   Decimal      @default(0)
  total       Decimal      @default(0)

  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([invoiceId])
}

model Payment {
  id         String   @id @default(cuid())
  invoiceId  String
  amount     Decimal  @default(0)
  method     String?
  reference  String?
  receivedAt DateTime @default(now())
  notes      String?  @db.Text

  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([invoiceId])
}

model EmailLog {
  id        String   @id @default(cuid())
  to        String
  subject   String
  template  String?
  payload   Json?
  status    String   @default("SENT")
  error     String?  @db.Text
  createdAt DateTime @default(now())
}

model Setting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     Json?
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Notification {
  id        String    @id @default(cuid())
  userId    String
  title     String
  body      String?   @db.Text
  type      String    @default("info")
  readAt    DateTime?
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([readAt])
}

model PortalToken {
  id         String    @id @default(cuid())
  customerId String
  jobId      String?
  token      String    @unique
  expiresAt  DateTime
  createdAt  DateTime  @default(now())
  lastUsedAt DateTime?

  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  job      Job?     @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([customerId])
  @@index([token])
}

model JobDocument {
  id         String   @id @default(cuid())
  jobId      String
  url        String
  type       String   @default("photo")
  label      String?
  uploadedBy String?
  createdAt  DateTime @default(now())

  job  Job   @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user User? @relation(fields: [uploadedBy], references: [id])

  @@index([jobId])
}
